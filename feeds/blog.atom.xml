<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>David Kane - Blog</title><link href="https://drkane.co.uk/" rel="alternate"></link><link href="/feeds/blog.atom.xml" rel="self"></link><id>https://drkane.co.uk/</id><updated>2018-03-31T13:25:00+01:00</updated><entry><title>Adding charity details using findthatcharity - Part II</title><link href="https://drkane.co.uk/2018/adding-charity-details-using-findthatcharity-part-ii/" rel="alternate"></link><published>2018-03-31T13:25:00+01:00</published><updated>2018-03-31T13:25:00+01:00</updated><author><name>David Kane</name></author><id>tag:drkane.co.uk,2018-03-31:/2018/adding-charity-details-using-findthatcharity-part-ii/</id><summary type="html">&lt;p&gt;&lt;a href="/2018/adding-charity-details-using-findthatcharityuk-part-i/"&gt;...continued from part 1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="part-ii-add-charity-details"&gt;Part II - add charity details&lt;/h2&gt;
&lt;p&gt;Once you've got a list of organisations in OpenRefine with charity numbers you
can then add more details about the organisations using &lt;a href="https://findthatcharity.uk/"&gt;findthatcharity.uk&lt;/a&gt;.
You can add:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;postcode&lt;/li&gt;
&lt;li&gt;website&lt;/li&gt;
&lt;li&gt;latest income&lt;/li&gt;
&lt;li&gt;link to Charity Commission register&lt;/li&gt;
&lt;li&gt;date registered/removed&lt;/li&gt;
&lt;li&gt;Company Number …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a href="/2018/adding-charity-details-using-findthatcharityuk-part-i/"&gt;...continued from part 1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="part-ii-add-charity-details"&gt;Part II - add charity details&lt;/h2&gt;
&lt;p&gt;Once you've got a list of organisations in OpenRefine with charity numbers you
can then add more details about the organisations using &lt;a href="https://findthatcharity.uk/"&gt;findthatcharity.uk&lt;/a&gt;.
You can add:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;postcode&lt;/li&gt;
&lt;li&gt;website&lt;/li&gt;
&lt;li&gt;latest income&lt;/li&gt;
&lt;li&gt;link to Charity Commission register&lt;/li&gt;
&lt;li&gt;date registered/removed&lt;/li&gt;
&lt;li&gt;Company Number&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1-fetch-json-data"&gt;1: Fetch JSON data&lt;/h3&gt;
&lt;p&gt;First you fetch data from the findthatcharity page for that charity. We'll be getting
the data in "JSON" format - this means we can get the fields we need out of the data.&lt;/p&gt;
&lt;p&gt;To fetch the data, click the arrow menu next to the column with the charity numbers and
select &lt;code&gt;Edit Column &amp;gt; Add column by fetching URLs...&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of OpenRefine option for adding column based on an url" src="/images/reconcile/add-column-by-url.png"&gt;&lt;/p&gt;
&lt;p&gt;In the resulting dialog you need to add a formula which will create the URL that needs
to be fetched. This means adding the charity number value into a template. The formula
you need is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;https://findthatcharity.uk/charity/&amp;quot; + value + &amp;quot;.json&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you include the quotation marks in the correct place. Add a new column name
(something like "Charity Details"). The "Throttle delay" setting helps to lessen the
load on the site being fetched from - the default value is 5000 milliseconds (5 seconds).
Findthat charity can cope with more requests than that (within reason!) So I'll generally
set it to 50-100 milliseconds, which works out as between 10 and 20 requests per second.&lt;/p&gt;
&lt;p&gt;The resulting dialog should look something like the following. You'll see a preview of the
url which should look sensible. You can test that the URL is correct by visiting one of the
preview URLs. You'll also see that columns with a &lt;code&gt;null&lt;/code&gt; value also produce a &lt;code&gt;null&lt;/code&gt; URL
so won't be fetched.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Preview of the Add column by fetching from URL dialog" src="/images/reconcile/add-column-dialog.png"&gt;&lt;/p&gt;
&lt;h3 id="2-extract-details-from-the-json-data"&gt;2. Extract details from the JSON data&lt;/h3&gt;
&lt;p&gt;You should see a new column filled with JSON data - it looks very hard to read, but all the 
data we'll looking for. You'll need to get OpenRefine to look through this data and extract
the fields you're looking for.&lt;/p&gt;
&lt;p&gt;I'll demo this with the &lt;code&gt;latestincome&lt;/code&gt; and &lt;code&gt;company number&lt;/code&gt; fields, but the same principle
can be used to extract anything from the data.&lt;/p&gt;
&lt;p&gt;Use the arrow menu next to the new column, and then select &lt;code&gt;Edit Column &amp;gt; Add column based on this column...&lt;/code&gt;
Again, we'll enter a formula to parse the JSON and find the right value within. We're using
the &lt;code&gt;parseJson&lt;/code&gt; OpenRefine function. Enter the following formula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parseJson(value)[&amp;quot;latest_income&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enter a name for the column and press OK to add it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dialog for adding a new column by parsing JSON" src="/images/reconcile/parse-json-1.png"&gt;&lt;/p&gt;
&lt;h4 id="company-number"&gt;Company number&lt;/h4&gt;
&lt;p&gt;Adding a company number is slightly more complicated. This is because the &lt;code&gt;company_number&lt;/code&gt;
field can contain multiple values (if a charity is linked with more than one company).
So the formula we'll use in this instance is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parseJson(value)[&amp;quot;company_number&amp;quot;][0][&amp;quot;number&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;[0]&lt;/code&gt; part selects the first value within the list of values of &lt;code&gt;company_number&lt;/code&gt;, and
then &lt;code&gt;["number"]&lt;/code&gt; selects the company number within that.&lt;/p&gt;
&lt;h3 id="3-save-the-data"&gt;3. Save the data&lt;/h3&gt;
&lt;p&gt;While OpenRefine is useful for this kind of data cleaning and linking, you'll want to 
export the data to another programme to perform analysis. You can do this using the 
&lt;code&gt;Export&lt;/code&gt; menu found in the top right hand corner. The default formats are pretty
straightforward, and it's possible to create more sophisticated exports (including a JSON
export) using the &lt;code&gt;Custom tabular exporter...&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;One thing to remember with export - it will use any active filters when exporting, so make
sure you don't have restrictive filters that exclude data you actually need.&lt;/p&gt;
&lt;h3 id="4-optional-using-charity-base"&gt;4. Optional - using Charity Base&lt;/h3&gt;
&lt;p&gt;The data found on findthatcharity.uk is minimal as it is only included to support the site's
main purpose of being a search engine. If there are other details you need then you may need
to look for other data sources.&lt;/p&gt;
&lt;p&gt;A good place to look is &lt;a href="https://charitybase.uk/"&gt;CharityBase&lt;/a&gt; which has more detailed data
extracted from the Charity Commission.&lt;/p&gt;
&lt;p&gt;A sample formula for getting a CharityBase URL for extracting data might look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;https://charitybase.uk/api/v0.2.0/charities?subNumber=0&amp;amp;charityNumber=&amp;quot; + value + &amp;quot;&amp;amp;fields=mainCharity.income,registration,beta.people.employees&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note that you need to specify the fields you want to return - here we're looking for the 
number of employees).&lt;/p&gt;
&lt;p&gt;And the sample formula for parsing the resulting JSON data might look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parseJson(value)[&amp;quot;charities&amp;quot;][0][&amp;quot;beta&amp;quot;][&amp;quot;people&amp;quot;][&amp;quot;employees&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;</content><category term="Charities"></category><category term="findthatcharity"></category></entry><entry><title>Adding charity details using findthatcharity.uk - Part I</title><link href="https://drkane.co.uk/2018/adding-charity-details-using-findthatcharityuk-part-i/" rel="alternate"></link><published>2018-03-26T13:25:00+01:00</published><updated>2018-03-26T13:25:00+01:00</updated><author><name>David Kane</name></author><id>tag:drkane.co.uk,2018-03-26:/2018/adding-charity-details-using-findthatcharityuk-part-i/</id><summary type="html">&lt;h2 id="part-i-add-charity-numbers"&gt;Part I - add charity numbers&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="/2018/adding-charity-details-using-findthatcharity-part-ii/"&gt;See part II&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://findthatcharity.uk/"&gt;findthatcharity.uk&lt;/a&gt; is a site I've created to help access
data about charities. One of the ways you can use it is to add details about a list of
charities if you only know their names.&lt;/p&gt;
&lt;p&gt;This is often called "reconciliation" - turning …&lt;/p&gt;</summary><content type="html">&lt;h2 id="part-i-add-charity-numbers"&gt;Part I - add charity numbers&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="/2018/adding-charity-details-using-findthatcharity-part-ii/"&gt;See part II&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://findthatcharity.uk/"&gt;findthatcharity.uk&lt;/a&gt; is a site I've created to help access
data about charities. One of the ways you can use it is to add details about a list of
charities if you only know their names.&lt;/p&gt;
&lt;p&gt;This is often called "reconciliation" - turning a list of names into something that 
unambiguously identifies the charity. Charities are often known by different names, or
have variations like "Ltd" rather than "Limited", so by adding charity numbers we can
make sure we're talking about the same charity whether we say "Comic Relief" or "Charity
Projects".&lt;/p&gt;
&lt;p&gt;In this post I'm going to show you how to use &lt;a href="http://openrefine.org/"&gt;OpenRefine&lt;/a&gt; 
and &lt;a href="https://findthatcharity.uk/"&gt;findthatcharity.uk&lt;/a&gt; to turn charity names into 
numbers. In the next part, I'll show how to use charity numbers to fetch extra information
about a charity - like their web address or latest income.&lt;/p&gt;
&lt;h3 id="1-get-open-refine"&gt;1. Get Open Refine&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://openrefine.org/"&gt;OpenRefine&lt;/a&gt; is a great data cleaning/wrangling tool. It was 
originally started by Google (and so is sometimes still called Google Refine), but 
is now run by a team of volunteer developers.&lt;/p&gt;
&lt;p&gt;You can find the download for your platform on the &lt;a href="http://openrefine.org/download.html"&gt;download page&lt;/a&gt;.
Note that if you're a Windows user you won't "install" it in the same way you might for
other programs - instead you extract the zip file into a directory and then run &lt;code&gt;refine.bat&lt;/code&gt;
from that directory.&lt;/p&gt;
&lt;p&gt;Again, OpenRefine might be a bit different from other programs you've seen in that it
doesn't open in it's own window - instead it has a "server" that runs in the background,
and you interact with it through a web browser. The address you visit (normally &lt;a href="http://localhost:3333"&gt;http://localhost:3333&lt;/a&gt;)
is only accessible through your computer though - other parts of the internet can't 
see it.&lt;/p&gt;
&lt;h3 id="2-load-your-data"&gt;2. Load your data&lt;/h3&gt;
&lt;p&gt;When you first open OpenRefine you'll see a page that looks a bit like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Web page screenshot showing the OpenRefine screen for importing data" src="/images/reconcile/first-screen.png"&gt; &lt;/p&gt;
&lt;p&gt;You can follow the instructions for importing your data. OpenRefine has some very
flexible options for importing data. The important thing about your data is that
it should be a "flat file" - a simple table with rows and columns. You might need
to use another program (like Excel) to get your data in this format first.&lt;/p&gt;
&lt;p&gt;I've chosen to use some data published by the &lt;a href="http://cheshirecommunityfoundation.org.uk/wp-content/uploads/2017/06/Grants-Awarded-Fiscal-Year-2016.xlsx"&gt;Cheshire Community Foundation [xlsx - 57Kb]&lt;/a&gt;
on the grants they've published. This data is published to the &lt;a href="https://www.threesixtygiving.org/"&gt;360 Giving grant data standard&lt;/a&gt;
and I found it in the &lt;a href="https://www.threesixtygiving.org/data/data-registry/"&gt;360 Giving data registry&lt;/a&gt;.
It already includes charity numbers so we wouldn't need to do this reconciliation
process, but it's useful to have them there to check how good the reconiliation
process is.&lt;/p&gt;
&lt;p&gt;I can point OpenRefine at this URL and it will download and load it itself. Here's what the
data looks like once it's been imported. I've hidden the &lt;code&gt;description&lt;/code&gt; field to get more
rows on the screen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Data loaded into OpenRefine" src="/images/reconcile/data-ready.png"&gt;&lt;/p&gt;
&lt;h3 id="3-reconcile-charity-names"&gt;3. Reconcile charity names&lt;/h3&gt;
&lt;p&gt;We're going to be using the &lt;code&gt;Recipient Org:Name&lt;/code&gt; field to reconcile - this contains the
name of the organisation that received the grant. Click on the arrow next to the column
title to bring up the menu, and click &lt;code&gt;Reconcile &amp;gt; Start reconciling...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Location of the reconcile menu" src="/images/reconcile/reconcile-menu.png"&gt;&lt;/p&gt;
&lt;p&gt;Now you need to add the Find that Charity reconciliation service. This is a web service
that will recieve data from OpenRefine (in this case the name of a charity) and tries
to match it to an entity. It returns a list of possible matches, and allows us to 
extract the ID of each match (in this case the charity number).&lt;/p&gt;
&lt;p&gt;Click &lt;code&gt;Add Standard Service...&lt;/code&gt; and then paste &lt;code&gt;https://findthatcharity.uk/reconcile&lt;/code&gt;
in the textbox, and click &lt;code&gt;Add Service&lt;/code&gt;. This will then (possibly after a short delay)
add a service called "charitysearch".&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dialog box for adding a reconciliation service" src="/images/reconcile/add-service.png"&gt;&lt;/p&gt;
&lt;p&gt;You'll see a list with just "charity" on the left hand side (you might need to hide 
the sidebar). You can leave the default options (at the moment findthatcharity doesn't
take any additional properties to help matching, but this might be something we add 
later).&lt;/p&gt;
&lt;p&gt;Click &lt;code&gt;Start Reconciling&lt;/code&gt; to make the magic happen. This might take a while if you
have lots of records. OpenRefine will batch up charities and send a few at a time
to findthatcharity, but the server can only cope with so many requests at a time.
If you need to do lots of requests (&amp;gt;5,000 in one go), speak to me directly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Completed options for running reconcilation" src="/images/reconcile/start-reconciling.png"&gt;&lt;/p&gt;
&lt;p&gt;You'll see a counter with the percentage complete at the top, and when finished each field will
show the matches that have been made. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Reconciliation results, showing a series of checkboxes for each entry with possible matches" src="/images/reconcile/reconcile-results.png"&gt;&lt;/p&gt;
&lt;h3 id="4-check-the-matches"&gt;4. Check the matches&lt;/h3&gt;
&lt;p&gt;You now need to check the matches. Depending on your time and the number of records, there's a
few options for this. &lt;/p&gt;
&lt;h4 id="manually-check-every-record"&gt;Manually check every record&lt;/h4&gt;
&lt;p&gt;You can manually check each record - just click on the single tick next to the correct match.
You can also click the box with two ticks if you'd like every instance of this record to be
matched to this entity.&lt;/p&gt;
&lt;h4 id="match-all-records-to-the-best-result"&gt;Match all records to the best result&lt;/h4&gt;
&lt;p&gt;If you trust the algorithm, or have done some manual checking and think they're all correct, you
can just take the best match for each record. To do this, click the arrow menu next to the 
&lt;code&gt;Recipient Org:Name&lt;/code&gt; column heading, and select &lt;code&gt;Reconcile &amp;gt; Actions &amp;gt; Match each cell to its best candidate&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="filter-and-match"&gt;Filter and match&lt;/h4&gt;
&lt;p&gt;You can also combine these two approaches using filters. On the left hand side of the screen,
OpenRefine has added two "facets" based on the results of the reconciliation. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;judgement&lt;/code&gt; facet at the top shows the overall result - either &lt;code&gt;(blank)&lt;/code&gt; where no matches
have been found, &lt;code&gt;none&lt;/code&gt; where there are some matches or &lt;code&gt;matched&lt;/code&gt; where a single match has
been selected (some records are marked as &lt;code&gt;matched&lt;/code&gt; already if findthatcharity thinks they
are an exact match).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;best candidate's score&lt;/code&gt; facet shows the score of the best match candidate, and allows you
to select different numbers by dragging the range sliders. You can also remove &lt;code&gt;Error&lt;/code&gt; values:
these are the ones with no match.&lt;/p&gt;
&lt;p&gt;You can drag the score fact to select only those with high matching scores - this will filter
to show only those rows with the selected scores. The &lt;code&gt;Match each cell to its best candidate&lt;/code&gt;
action also respects this filter, so you can use that to match all the records found by the 
filter, with the remainder remaining unmatched.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Results of combining the score filter with matching each cell to best candidate" src="/images/reconcile/filtered-matches.png"&gt;&lt;/p&gt;
&lt;h3 id="5-add-charity-number"&gt;5. Add charity number&lt;/h3&gt;
&lt;p&gt;Once you're happy with the matches you can add a new column with the matched charity number in.
To do this, use the arrow menu next to the column heading, and click &lt;code&gt;Edit column &amp;gt; Add column based on this column...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The box that pops up allows you to specify lots of different columns. Add a name for your column
at the top ("Charity Number" would make sense), and then add &lt;code&gt;cell.recon.match.id&lt;/code&gt; in the "Expression"
box. This will look at the cell reconcilation object, and find the &lt;code&gt;id&lt;/code&gt; of the matched candidate.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Entering an expression for getting the matched cell id" src="/images/reconcile/add-charity-number.png"&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;OK&lt;/code&gt; to add this column.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That's it for part one - hopefully you've now got a charity number for all the charities in 
your data. In &lt;a href="/2018/adding-charity-details-using-findthatcharity-part-ii/"&gt;the next part&lt;/a&gt; I'll take a look at using the charity number to add more details
about the charity, like it's web address or latest income.&lt;/p&gt;
&lt;p&gt;&lt;a href="/2018/adding-charity-details-using-findthatcharity-part-ii/"&gt;Part II continues here...&lt;/a&gt;&lt;/p&gt;</content><category term="Charities"></category><category term="findthatcharity"></category></entry><entry><title>Back in the GDPR</title><link href="https://drkane.co.uk/2018/back-in-the-gdpr/" rel="alternate"></link><published>2018-03-01T13:25:00+00:00</published><updated>2018-03-01T13:25:00+00:00</updated><author><name>David Kane</name></author><id>tag:drkane.co.uk,2018-03-01:/2018/back-in-the-gdpr/</id><summary type="html">&lt;p&gt;G-day (the 25 May) is fast approaching, when charities will need to be GDPR-compliant. While &lt;a href="https://www.thirdsector.co.uk/less-half-charities-heard-new-data-protection-rule/fundraising/article/1455490"&gt;half of charities apparently haven't heard of it&lt;/a&gt; there's no shortage of resources so I've put together &lt;a href="https://github.com/drkane/charity-gdpr-resources"&gt;a list of the resources I've seen produced&lt;/a&gt; on github.&lt;/p&gt;
&lt;p&gt;If you see anything missing then please add …&lt;/p&gt;</summary><content type="html">&lt;p&gt;G-day (the 25 May) is fast approaching, when charities will need to be GDPR-compliant. While &lt;a href="https://www.thirdsector.co.uk/less-half-charities-heard-new-data-protection-rule/fundraising/article/1455490"&gt;half of charities apparently haven't heard of it&lt;/a&gt; there's no shortage of resources so I've put together &lt;a href="https://github.com/drkane/charity-gdpr-resources"&gt;a list of the resources I've seen produced&lt;/a&gt; on github.&lt;/p&gt;
&lt;p&gt;If you see anything missing then please add an issue or make a pull request (or &lt;a href="https://twitter.com/kanedr"&gt;tweet me @kanedr&lt;/a&gt;) and I'll add it.&lt;/p&gt;
&lt;p&gt;My view on GDPR is that, as a consumer, it's a welcome rebalancing of data rights from organisations to individuals, and I think organisations can embrace it positively to think better about how they handle data about their clients, staff, donors and beneficiaries.&lt;/p&gt;
&lt;p&gt;With that in mind I'd highly recommend these resources by &lt;a href="https://projectsbyif.com/"&gt;IF&lt;/a&gt;. They show ways in which GDPR doesn't just have to be an annoyance that means you have to reword your forms, but instead something that can help you fundamentally rethink the way your users need you to handle their data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://newdigitalrights.projectsbyif.com/"&gt;Designing for new Digital Rights&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="GDPR"></category><category term="Data Protection"></category></entry><entry><title>Names shared by genders</title><link href="https://drkane.co.uk/2018/names-shared-by-genders/" rel="alternate"></link><published>2018-02-10T21:32:35+01:00</published><updated>2018-02-10T21:32:35+01:00</updated><author><name>David Kane</name></author><id>tag:drkane.co.uk,2018-02-10:/2018/names-shared-by-genders/</id><summary type="html">&lt;p&gt;Building the gender classifier I've &lt;a href="/a-name-gender-classifier/"&gt;written about here&lt;/a&gt; got me interested
in ambiguous names - those that are shared by people of both genders.&lt;/p&gt;
&lt;p&gt;I realised I could use the list of male and female charity trustee names
I'd gathered to look into this in a bit more detail. Bearing in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Building the gender classifier I've &lt;a href="/a-name-gender-classifier/"&gt;written about here&lt;/a&gt; got me interested
in ambiguous names - those that are shared by people of both genders.&lt;/p&gt;
&lt;p&gt;I realised I could use the list of male and female charity trustee names
I'd gathered to look into this in a bit more detail. Bearing in mind the
limitations and bias of the source dataset, I think it can generate some
insight.&lt;/p&gt;
&lt;p&gt;This blogpost was written as a juypter notebook, so it can be run to 
recreate the research. &lt;a href="https://github.com/"&gt;You can find the notebook code on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We start by importing the libraries we need - two built-in python libraries
(&lt;code&gt;csv&lt;/code&gt; and &lt;code&gt;collections&lt;/code&gt;), &lt;code&gt;pandas&lt;/code&gt; for analysing the data and &lt;code&gt;matplotlib&lt;/code&gt;
for making charts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To start, we go through all the names in our source data, and use the names with titles to find first names of males and females. To do this I've just taken the first word from the string, excluding the title, providing it's more than one character. This is fairly crude, and will be wrong in some cases (eg someone who uses two first names). But it should be good enough for our purposes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extract_trustee.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# ignore rows that aren&amp;#39;t two records long&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# split the name by spaces&lt;/span&gt;
        &lt;span class="c1"&gt;# if there&amp;#39;s only one field then ignore the name&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="c1"&gt;# if the second name string (usually surname) is less that 2 characters ignore the row&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="c1"&gt;# if there are non-alpha characters (numbers, symbols) then ignore the row&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isalpha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# get the first name (assuming name[0] is a title)&lt;/span&gt;
        &lt;span class="c1"&gt;# if the first word is one of these titles it&amp;#39;s a female name&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;miss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mrs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dame&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="c1"&gt;# if the first word is one of these titles it&amp;#39;s a male name&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sir&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets check the female and male names to check we're on the right track.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[&amp;#39;Felicity&amp;#39;, &amp;#39;Tessa&amp;#39;, &amp;#39;Elizabeth&amp;#39;, &amp;#39;Julie&amp;#39;, &amp;#39;Rosemary&amp;#39;, &amp;#39;Catherine&amp;#39;, &amp;#39;Eileen&amp;#39;, &amp;#39;Christa&amp;#39;, &amp;#39;Roberta&amp;#39;, &amp;#39;Beverley&amp;#39;]&lt;/span&gt;
&lt;span class="k"&gt;[&amp;#39;Oliver&amp;#39;, &amp;#39;Kenneth&amp;#39;, &amp;#39;Neil&amp;#39;, &amp;#39;Keith&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Herschel&amp;#39;, &amp;#39;Alex&amp;#39;, &amp;#39;David&amp;#39;, &amp;#39;Christopher&amp;#39;, &amp;#39;Daniel&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;female&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;male&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;female_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;female&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;male_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;male&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;all_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;female_names&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;male_names&lt;/span&gt;
&lt;span class="n"&gt;female_people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;female&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="n"&gt;male_people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;male&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="n"&gt;all_people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;female_people&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;male_people&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Female: {:,.0f} (from {:,.0f} people)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;female_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;female_people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Male: {:,.0f} (from {:,.0f} people)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;male_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;male_people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{:,.1f} &lt;/span&gt;&lt;span class="si"&gt;% o&lt;/span&gt;&lt;span class="s2"&gt;f names are female, {:,.1f} of people in sample&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;female_names&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;all_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;female_people&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;all_people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;weighting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;male_people&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;0.489&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;male_people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;female_people&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Use a weighting of {:,.3f} to bring female population to 51.1&lt;/span&gt;&lt;span class="si"&gt;% o&lt;/span&gt;&lt;span class="s2"&gt;f sample&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;weighting&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# 100 = X + Y&lt;/span&gt;
&lt;span class="c1"&gt;# X = male&lt;/span&gt;
&lt;span class="c1"&gt;# Y = female&lt;/span&gt;
&lt;span class="c1"&gt;# Z = female weighted&lt;/span&gt;
&lt;span class="c1"&gt;# X / (X + Y) = 0.520&lt;/span&gt;
&lt;span class="c1"&gt;# X / (X + Z) = 0.489&lt;/span&gt;
&lt;span class="c1"&gt;# X = 0.489 * (X + Z)&lt;/span&gt;
&lt;span class="c1"&gt;# X / 0.489 = X + Z&lt;/span&gt;
&lt;span class="c1"&gt;# Z = (X / 0.489) - X&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Female&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;367&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;335&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;237&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Male&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;085&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;363&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;296&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;48.9&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;female&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;48.0&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;
&lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;weighting&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mf"&gt;1.132&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;bring&lt;/span&gt; &lt;span class="n"&gt;female&lt;/span&gt; &lt;span class="n"&gt;population&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mf"&gt;51.1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives us 15,367 female first names (from 335,000 people) and 
16,085 male ones (from 363,296 people). The only issue is that
the ratio is slightly off - 48.0% of our sample are female, compared to &lt;a href="https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates/datasets/populationestimatesforukenglandandwalesscotlandandnorthernireland"&gt;51.1% of
the 18+ population in England and Wales&lt;/a&gt;.
So we can use a weighting of 1.132 to correct this when we use the counts.&lt;/p&gt;
&lt;p&gt;Next we work out the count of how many times each name appears for men and
women. To do this the data is put into panda dataframes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;female_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;female&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;female_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;male_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;male&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;male_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then apply our weighting to the female figures to adjust for the
lower number in our sample.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;female_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;female_df&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;weighting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These dataframes are merged together, joining on the name, to give us a list of first names found in the dataset alongside the number of females and males found with that name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;both&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;female_df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;male_df&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;outer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;female_pc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;male_pc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ascending&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see a list of the top 10 most common first names in the dataset (only two female names make the list - even after applying our weighting).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;female&lt;/th&gt;
      &lt;th&gt;male&lt;/th&gt;
      &lt;th&gt;total&lt;/th&gt;
      &lt;th&gt;female_pc&lt;/th&gt;
      &lt;th&gt;male_pc&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;David&lt;/th&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;21480.0&lt;/td&gt;
      &lt;td&gt;21488.0&lt;/td&gt;
      &lt;td&gt;0.000372&lt;/td&gt;
      &lt;td&gt;0.999628&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;John&lt;/th&gt;
      &lt;td&gt;9.0&lt;/td&gt;
      &lt;td&gt;21155.0&lt;/td&gt;
      &lt;td&gt;21164.0&lt;/td&gt;
      &lt;td&gt;0.000425&lt;/td&gt;
      &lt;td&gt;0.999575&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Peter&lt;/th&gt;
      &lt;td&gt;6.0&lt;/td&gt;
      &lt;td&gt;12421.0&lt;/td&gt;
      &lt;td&gt;12427.0&lt;/td&gt;
      &lt;td&gt;0.000483&lt;/td&gt;
      &lt;td&gt;0.999517&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Michael&lt;/th&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;12021.0&lt;/td&gt;
      &lt;td&gt;12024.0&lt;/td&gt;
      &lt;td&gt;0.000250&lt;/td&gt;
      &lt;td&gt;0.999750&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Richard&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;9702.0&lt;/td&gt;
      &lt;td&gt;9703.0&lt;/td&gt;
      &lt;td&gt;0.000103&lt;/td&gt;
      &lt;td&gt;0.999897&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Susan&lt;/th&gt;
      &lt;td&gt;8872.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;8875.0&lt;/td&gt;
      &lt;td&gt;0.999662&lt;/td&gt;
      &lt;td&gt;0.000338&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Andrew&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;8746.0&lt;/td&gt;
      &lt;td&gt;8747.0&lt;/td&gt;
      &lt;td&gt;0.000114&lt;/td&gt;
      &lt;td&gt;0.999886&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Paul&lt;/th&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;8492.0&lt;/td&gt;
      &lt;td&gt;8495.0&lt;/td&gt;
      &lt;td&gt;0.000353&lt;/td&gt;
      &lt;td&gt;0.999647&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Robert&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;7879.0&lt;/td&gt;
      &lt;td&gt;7880.0&lt;/td&gt;
      &lt;td&gt;0.000127&lt;/td&gt;
      &lt;td&gt;0.999873&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Margaret&lt;/th&gt;
      &lt;td&gt;7866.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;7871.0&lt;/td&gt;
      &lt;td&gt;0.999365&lt;/td&gt;
      &lt;td&gt;0.000635&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And a list of some of the least common - these names only appear once.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;female&lt;/th&gt;
      &lt;th&gt;male&lt;/th&gt;
      &lt;th&gt;total&lt;/th&gt;
      &lt;th&gt;female_pc&lt;/th&gt;
      &lt;th&gt;male_pc&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Jibola&lt;/th&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jibi&lt;/th&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jiba&lt;/th&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jiaokun&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jiann&lt;/th&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jianmin&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jiale&lt;/th&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jia&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jhumar&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Zyta&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id="shared-names"&gt;Shared names&lt;/h2&gt;
&lt;p&gt;We now move on to what we were trying to do - get a list of names that are commonly shared between people of different genders. You can see from the top 10s above that it's not a perfect dataset - some names that you might assume are unambiguously male or female have some counterparts - there are 8 female Davids, and 3 male Susans.&lt;/p&gt;
&lt;p&gt;This could be a mistake in the way the algorithm was applied, a typo in the data, or people who have an unusual name. But to look only at names we would expect to be more common, I've filtered to only show only names where more than 30 instances of both male and female people have the name. This threshold should also ensure we have a decent sample of people for each name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;both&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;female_pc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ascending&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;shared&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;23
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;female&lt;/th&gt;
      &lt;th&gt;male&lt;/th&gt;
      &lt;th&gt;total&lt;/th&gt;
      &lt;th&gt;female_pc&lt;/th&gt;
      &lt;th&gt;male_pc&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Jean&lt;/th&gt;
      &lt;td&gt;3787.0&lt;/td&gt;
      &lt;td&gt;50.0&lt;/td&gt;
      &lt;td&gt;3837.0&lt;/td&gt;
      &lt;td&gt;0.986969&lt;/td&gt;
      &lt;td&gt;0.013031&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Pat&lt;/th&gt;
      &lt;td&gt;1154.0&lt;/td&gt;
      &lt;td&gt;67.0&lt;/td&gt;
      &lt;td&gt;1221.0&lt;/td&gt;
      &lt;td&gt;0.945127&lt;/td&gt;
      &lt;td&gt;0.054873&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Kerry&lt;/th&gt;
      &lt;td&gt;530.0&lt;/td&gt;
      &lt;td&gt;45.0&lt;/td&gt;
      &lt;td&gt;575.0&lt;/td&gt;
      &lt;td&gt;0.921739&lt;/td&gt;
      &lt;td&gt;0.078261&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Lyn&lt;/th&gt;
      &lt;td&gt;337.0&lt;/td&gt;
      &lt;td&gt;36.0&lt;/td&gt;
      &lt;td&gt;373.0&lt;/td&gt;
      &lt;td&gt;0.903485&lt;/td&gt;
      &lt;td&gt;0.096515&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Kim&lt;/th&gt;
      &lt;td&gt;711.0&lt;/td&gt;
      &lt;td&gt;80.0&lt;/td&gt;
      &lt;td&gt;791.0&lt;/td&gt;
      &lt;td&gt;0.898862&lt;/td&gt;
      &lt;td&gt;0.101138&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jan&lt;/th&gt;
      &lt;td&gt;802.0&lt;/td&gt;
      &lt;td&gt;108.0&lt;/td&gt;
      &lt;td&gt;910.0&lt;/td&gt;
      &lt;td&gt;0.881319&lt;/td&gt;
      &lt;td&gt;0.118681&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Lindsay&lt;/th&gt;
      &lt;td&gt;347.0&lt;/td&gt;
      &lt;td&gt;62.0&lt;/td&gt;
      &lt;td&gt;409.0&lt;/td&gt;
      &lt;td&gt;0.848411&lt;/td&gt;
      &lt;td&gt;0.151589&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Sandy&lt;/th&gt;
      &lt;td&gt;126.0&lt;/td&gt;
      &lt;td&gt;42.0&lt;/td&gt;
      &lt;td&gt;168.0&lt;/td&gt;
      &lt;td&gt;0.750000&lt;/td&gt;
      &lt;td&gt;0.250000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Mel&lt;/th&gt;
      &lt;td&gt;62.0&lt;/td&gt;
      &lt;td&gt;54.0&lt;/td&gt;
      &lt;td&gt;116.0&lt;/td&gt;
      &lt;td&gt;0.534483&lt;/td&gt;
      &lt;td&gt;0.465517&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Vivian&lt;/th&gt;
      &lt;td&gt;87.0&lt;/td&gt;
      &lt;td&gt;79.0&lt;/td&gt;
      &lt;td&gt;166.0&lt;/td&gt;
      &lt;td&gt;0.524096&lt;/td&gt;
      &lt;td&gt;0.475904&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Leigh&lt;/th&gt;
      &lt;td&gt;88.0&lt;/td&gt;
      &lt;td&gt;92.0&lt;/td&gt;
      &lt;td&gt;180.0&lt;/td&gt;
      &lt;td&gt;0.488889&lt;/td&gt;
      &lt;td&gt;0.511111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Jose&lt;/th&gt;
      &lt;td&gt;43.0&lt;/td&gt;
      &lt;td&gt;60.0&lt;/td&gt;
      &lt;td&gt;103.0&lt;/td&gt;
      &lt;td&gt;0.417476&lt;/td&gt;
      &lt;td&gt;0.582524&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Sam&lt;/th&gt;
      &lt;td&gt;215.0&lt;/td&gt;
      &lt;td&gt;340.0&lt;/td&gt;
      &lt;td&gt;555.0&lt;/td&gt;
      &lt;td&gt;0.387387&lt;/td&gt;
      &lt;td&gt;0.612613&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Laurie&lt;/th&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;71.0&lt;/td&gt;
      &lt;td&gt;103.0&lt;/td&gt;
      &lt;td&gt;0.310680&lt;/td&gt;
      &lt;td&gt;0.689320&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Alex&lt;/th&gt;
      &lt;td&gt;177.0&lt;/td&gt;
      &lt;td&gt;506.0&lt;/td&gt;
      &lt;td&gt;683.0&lt;/td&gt;
      &lt;td&gt;0.259151&lt;/td&gt;
      &lt;td&gt;0.740849&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Chris&lt;/th&gt;
      &lt;td&gt;419.0&lt;/td&gt;
      &lt;td&gt;1856.0&lt;/td&gt;
      &lt;td&gt;2275.0&lt;/td&gt;
      &lt;td&gt;0.184176&lt;/td&gt;
      &lt;td&gt;0.815824&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Ali&lt;/th&gt;
      &lt;td&gt;52.0&lt;/td&gt;
      &lt;td&gt;268.0&lt;/td&gt;
      &lt;td&gt;320.0&lt;/td&gt;
      &lt;td&gt;0.162500&lt;/td&gt;
      &lt;td&gt;0.837500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Lee&lt;/th&gt;
      &lt;td&gt;92.0&lt;/td&gt;
      &lt;td&gt;524.0&lt;/td&gt;
      &lt;td&gt;616.0&lt;/td&gt;
      &lt;td&gt;0.149351&lt;/td&gt;
      &lt;td&gt;0.850649&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Ashley&lt;/th&gt;
      &lt;td&gt;43.0&lt;/td&gt;
      &lt;td&gt;257.0&lt;/td&gt;
      &lt;td&gt;300.0&lt;/td&gt;
      &lt;td&gt;0.143333&lt;/td&gt;
      &lt;td&gt;0.856667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Leslie&lt;/th&gt;
      &lt;td&gt;78.0&lt;/td&gt;
      &lt;td&gt;729.0&lt;/td&gt;
      &lt;td&gt;807.0&lt;/td&gt;
      &lt;td&gt;0.096654&lt;/td&gt;
      &lt;td&gt;0.903346&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Francis&lt;/th&gt;
      &lt;td&gt;51.0&lt;/td&gt;
      &lt;td&gt;533.0&lt;/td&gt;
      &lt;td&gt;584.0&lt;/td&gt;
      &lt;td&gt;0.087329&lt;/td&gt;
      &lt;td&gt;0.912671&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Terry&lt;/th&gt;
      &lt;td&gt;54.0&lt;/td&gt;
      &lt;td&gt;973.0&lt;/td&gt;
      &lt;td&gt;1027.0&lt;/td&gt;
      &lt;td&gt;0.052580&lt;/td&gt;
      &lt;td&gt;0.947420&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Robin&lt;/th&gt;
      &lt;td&gt;36.0&lt;/td&gt;
      &lt;td&gt;1438.0&lt;/td&gt;
      &lt;td&gt;1474.0&lt;/td&gt;
      &lt;td&gt;0.024423&lt;/td&gt;
      &lt;td&gt;0.975577&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This identifies 23 names meeting our criteria. They range from Jean (97% female), to Robin (98% male). But the most interesting names come in the middle. The closest to a 50-50 split are Leigh (49% female), Vivian (52% female) and Mel (53% female). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;female_pc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;male_pc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;barh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x23fe0924e80&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="/images/output_20_1.png"&gt;&lt;/p&gt;
&lt;p&gt;Charting the data gives us a few clusters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Names that are mostly female, but with some male use: &lt;strong&gt;Jean, Pat, Kerry, Lyn, Kim, Jan, Lindsay&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Names that are pretty close to 50-50: &lt;strong&gt;Mel, Vivian, Leigh, Jose, Sam&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Names that are mostly male, but with some female use: &lt;strong&gt;Alex, Chris, Ali, Lee, Ashley, Leslie, Terry, Robin&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>A name gender classifier</title><link href="https://drkane.co.uk/2018/a-name-gender-classifier/" rel="alternate"></link><published>2018-02-10T21:19:35+01:00</published><updated>2018-02-10T21:19:35+01:00</updated><author><name>David Kane</name></author><id>tag:drkane.co.uk,2018-02-10:/2018/a-name-gender-classifier/</id><summary type="html">&lt;p&gt;Something I've needed to do a couple of times is take a long list of names and
classify them into male and female. For example, I've looked at lists of people
who attended events to see whether they were reaching more men or women - this
then helps target future events …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Something I've needed to do a couple of times is take a long list of names and
classify them into male and female. For example, I've looked at lists of people
who attended events to see whether they were reaching more men or women - this
then helps target future events.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: there are lots of reasons why this is a terrible idea. For a start, gender
is more complicated than male/female, and there are lots of reasons why a name is
a bad guide to someone's gender (&lt;a href="http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/"&gt;and other things programmers wrongly believe about
names&lt;/a&gt;). 
But I've justified it here on the basis that I'm not interested in getting
100% of the genders exactly right, but instead to get a general idea of a split in
a population.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a good place to use a naïve Bayesian classifier. The best example of this
technique is a spam classifier - this will work out whether an email is spam, based
on comparing it to a model generated from a training data set. The "naïve" part
comes from the fact that it's simply based on words that appear in the training
data set, without considering the meaning of or connections between those words.&lt;/p&gt;
&lt;p&gt;To do this I'm going to use python (3.6 to be exact) and the &lt;a href="http://scikit-learn.org/stable/"&gt;scikit&lt;/a&gt;
library which has a naïve Bayesian classifier built in. It's based on the tutorial
found here.&lt;/p&gt;
&lt;h2 id="step-1-get-some-training-data"&gt;Step 1 - get some training data&lt;/h2&gt;
&lt;p&gt;The training data needs to be a list of names with their genders. I've found this a
tricky thing to come by, but luckily my work with the 
&lt;a href="http://data.charitycommission.gov.uk/"&gt;Charity Commission Register of Charities&lt;/a&gt;
throws up a good source.&lt;/p&gt;
&lt;p&gt;The large data extract they publish, under an open license, contains a list of
trustees for each charity. It's just a list of names - they hold information like
address, date of birth, etc but don't publish it for data protection reasons - but
it's possible to work out the gender of a proportion of the names.&lt;/p&gt;
&lt;p&gt;Out of the X,000 names, X,000 (X%) include a title (Mrs, Miss, Ms, Mr). Using those
four titles which are gender specific and cover X% of titles used. I wrote a python
script to parse the name CSV file, look for names that start with Mr, Mrs, etc and
put them into a male list or female list. This produces lists of X male names and
X female names.&lt;/p&gt;
&lt;p&gt;A couple of notes here. Like any training data set, this is not unbiased. Charity
trustees represent a particular slice of the population - people from all walks of
life are trustees, but the average trustee is older, whiter and richer than the
average person. So the names we're using are going to reflect those demographics.&lt;/p&gt;
&lt;p&gt;Note too that I'm not doing anything to separate out first names and last names -
I'm just using the whole string. This means that last names will be included in
the model - with the hope that they'll be equally distributed and so won't make
a difference to the final total. But this isn't a guarantee.&lt;/p&gt;
&lt;h2 id="step-2-training-the-model"&gt;Step 2: training the model&lt;/h2&gt;
&lt;h2 id="step-3-testing-the-model"&gt;Step 3: testing the model&lt;/h2&gt;
&lt;h2 id="step-4-using-the-model"&gt;Step 4: using the model&lt;/h2&gt;</content></entry><entry><title>Twitter bot – random charity</title><link href="https://drkane.co.uk/2016/twitter-bot-random-charity/" rel="alternate"></link><published>2016-10-16T10:20:00+01:00</published><updated>2016-10-16T10:20:00+01:00</updated><author><name>David Kane</name></author><id>tag:drkane.co.uk,2016-10-16:/2016/twitter-bot-random-charity/</id><summary type="html">&lt;p&gt;I’ve been playing about with twitter bots, and following &lt;a href="https://videlais.com/2015/03/02/how-to-create-a-basic-twitterbot-in-python/"&gt;some instructions on using the twitter API in python&lt;/a&gt;, I’ve created a bot that tweets a link to a random charity every half an hour.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/drkane/random-charity-bot"&gt;code and more details on the bot can be found on github&lt;/a&gt;. From …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve been playing about with twitter bots, and following &lt;a href="https://videlais.com/2015/03/02/how-to-create-a-basic-twitterbot-in-python/"&gt;some instructions on using the twitter API in python&lt;/a&gt;, I’ve created a bot that tweets a link to a random charity every half an hour.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/drkane/random-charity-bot"&gt;code and more details on the bot can be found on github&lt;/a&gt;. From the readme:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Twitter bot that tweets the name and website of a random charity. The data is based on the register held by the Charity Commission for England and Wales, &lt;a href="http://data.charitycommission.gov.uk/"&gt;released as open data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The bot randomly selects an active charity from the register, and tweets it. If the website of the charity is known it tweets that too, otherwise it gives a link to the official register entry for that charity.&lt;/p&gt;
&lt;p&gt;This bot isn’t affiliated with the Charity Commission, and gives no endorsement of the charities tweeted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Credit due to the following places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fetch charity data script adapted from &lt;a href="https://github.com/OpenDataServices/grantnav/blob/master/dataload/fetch_charity_data.py"&gt;https://github.com/OpenDataServices/grantnav/blob/master/dataload/fetch_charity_data.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twitter API use from &lt;a href="https://videlais.com/2015/03/02/how-to-create-a-basic-twitterbot-in-python/"&gt;https://videlais.com/2015/03/02/how-to-create-a-basic-twitterbot-in-python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Charity data from &lt;a href="http://data.charitycommission.gov.uk/"&gt;http://data.charitycommission.gov.uk/&lt;/a&gt; – used under Open Government Licence v3.0&lt;/li&gt;
&lt;/ul&gt;</content></entry></feed>